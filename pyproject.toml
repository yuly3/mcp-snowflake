[project]
dependencies = [
    "anyio>=4.0.0",
    "attrs>=25.3.0",
    "cattrs>=23.0.0",
    "mcp>=1.0.0",
    "pydantic-settings>=2.9.1",
    "pydantic>=2.0.0",
    "snowflake-connector-python>=3.0.0",
    "sqlparse>=0.5.3",
]
description = "Model Context Protocol (MCP) server for Snowflake database connectivity and SQL query execution"
name = "mcp-snowflake"
readme = "README.md"
requires-python = ">=3.13"
version = "0.1.0"

[project.scripts]
mcp-snowflake = "mcp_snowflake.__main__:main"

[dependency-groups]
dev = [
    "hypothesis>=6.136.4",
    "pytest-asyncio>=1.0.0",
    "pytest>=8.4.0",
    "ruff>=0.11.13",
]

[build-system]
build-backend = "hatchling.build"
requires = [
    "hatchling",
]

[tool.pyright]
exclude = [
    "./.venv",
    "./stub/sqlparse/**/*",
]
stubPath = "./stub"
typeCheckingMode = "standard"

reportConstantRedefinition = "error"
reportDeprecated = "warning"
reportDuplicateImport = "warning"
reportImportCycles = "error"
reportMatchNotExhaustive = "warning"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
reportShadowedImports = "warning"
reportUnknownLambdaType = "warning"
reportUnknownVariableType = "information"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUntypedBaseClass = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedNamedTuple = "warning"
reportUnusedCallResult = "information"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedImport = "warning"
reportUnusedVariable = "error"
strictDictionaryInference = true
strictListInference = true
strictSetInference = true

ignore = [
    ".env",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.uv.workspace]
members = [
    "packages/expression",
]
